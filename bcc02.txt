; Bytecode-Compiler
; es werden 3 Sprachkonstrukte eingeführt:
; Variablen, Sprungziele und Makros.
; Alle 3 Sprachkonstrukte werden bereits im Compiler behandelt. Sie finden sich anschließend nicht mehr im generierten Bytecode wieder.
; Die drei Sprachkonstrukte werden über eine gemeinsame Tabelle realisiert. Die Tabelle beginnt mit *. In der Tabelle steht der Name, gefolgt von '(' und dann einer Zeichenfolge, gefolgt von ')'.
; Beispiele (Variable dstack, Sprungziel mainloop, Makro dpush):
; *=dstack($1200):mainloop($1638)#dpush((dstack)@!$0002+$1200!)
; Variablen werden im Code über folgende Syntax eingeführt:
; =dstack($1200)
; Sprungziele werden wie folgt definiert:
; :mainloop
; Makros werden über # definiert:
; #dpush(dstack @!$0002+$1200!)
; Variablen, Sprungziele und Makros werden im Code abgerufen, in dem ihr Name geschrieben wird. In einem Makro dürfen andere Makros verwendet werden.
; Um Namen und Zahlen voneinander unterscheiden zu können, muss Zahlen ein $ vorangestellt werden.
; Dies gilt nur für den Compiler. Im generierten Bytecode werden die $-Zeichen wieder entfernt.
; Sprungziele werden zuletzt aufgelöst, da sich durch Makros der Code verschiebt und sich die Adressen für Sprungziele verändern.
: Die Auflösung von Variablen, Sprungzielen und Makros erfolgt iterativ über den gesamten Sourcecode: bei jedem Durchlauf werden die Namen durch den Code in der Tabelle ersetzt, solange, bis alle Namen ersetzt wurden.


=srcptr($120e)
=ch($120c)
#init($1500 srcptr !)
#getch(srcptr @ ch ! srcptr @ $0001 + srcptr !)
